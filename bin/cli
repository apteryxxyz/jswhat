#!/usr/bin/env node

const what = require('../src/index.js');
const package = require('../package.json');
const Table = noThrow(() => require('cli-table'));
const timer = Date.now();

function noThrow(fn) {
    try {
        return fn();
    } catch (err) {
        return undefined;
    }
}

function InputHandler() { };

InputHandler.prototype._ = [
    { name: ['help', 'h'], value: ['boolean', true], description: 'Show help message.' },
    { name: ['version', 'v'], value: ['boolean', true], description: 'Show the installed version of jsWhat.' },
    { name: ['search', 's'], value: ['boolean', true], description: 'Search globally within a string.' },
    { name: ['nontext', 'n'], value: ['boolean', true], description: 'The text input is a file path or URL.' },
    { name: ['tags', 't'], value: ['boolean', true], description: 'Show all the available tags.' },
    { name: ['filter', 'f'], value: ['string', null], description: 'Filter the results by names or tags, separate by commons.' },
    { name: ['exclude', 'e'], value: ['string', null], description: 'Exclude results based on names and tags, separate by commons.' }
]

InputHandler.prototype.handleOptions = function (argv) {
    const options = {};
    const flags = argv.filter(a => a.startsWith('-'));
    for (let flag of flags) {
        flag = flag.replace(/-/g, '').split('=');
        const option = InputHandler.prototype._.find(o => o.name.includes(flag[0]));
        if (!option) return InputHandler.prototype.invalidFlag(flag[0]);
        else if (option.value[0] === 'boolean') options[option.name[0]] = true;
        else if (option.value[0] === 'string') options[option.name[0]] = flag[1];
    }
    return options;
}

InputHandler.prototype.handleText = function (argv) {
    return argv.filter(a => !a.startsWith('-'));
}

InputHandler.prototype.invalidFlag = function (flag) {
    return OutputHandler.prototype.handleError(`Invalid option '${flag}'`);
}

function OutputHandler() { };

OutputHandler.prototype.handleError = function (error) {
    const message = (typeof error === 'string' ? error : error.message).replace(/\[jswhat\] ?/, '');
    return console.error('\x1b[31m%s\x1b[0m', `\n${message}\nTook: ${Date.now() - timer}ms`);
}

OutputHandler.prototype.handleTable = function (matched, total, table) {
    const header = '\nPossible Identification\n' +
        `${total > 50 ? `Showing ${matched.length}/${total}\n` : ''}` +
        `Took: ${Date.now() - timer}ms`;

    console.log('\x1b[36m%s\x1b[0m', header);
    if (!!Table) console.log(table.toString());
    else console.table(table);
    if (total > 25) console.log('\x1b[36m%s\x1b[0m', header);
}

OutputHandler.prototype.handleTags = function () {
    return console.log('\n', what.regex.tags);
}

OutputHandler.prototype.handleHelp = function () {
    function generateOptions() {
        const options = InputHandler.prototype._;
        return options.map(o => {
            let string = o.name[1] ? ` -${o.name[1]}, ` : ` `;
            const repeatSpaces = 20 - o.name[0].length;
            string += `--${o.name[0]}${' '.repeat(repeatSpaces)}${o.description}`;
            return string;
        }).join('\n') + '\n';
    }

    function generateExamples() {
        return [
            '192.168.0.2',
            'e@mail.com --search',
            'dQw4w9WgXcQ --filter=media',
            'path/to/file --nontext --search',
            'https://raw.github.com/apteryxxyz/jswhat/main/README.md -n -s',
            '--tags',
            'e@mail.com g@mail.com fakemail.com -s -f="Email Address"',
            'e@mail.com g@mail.com hot@mail.com mail.google.com -s -e="Email Address"'
        ].map(e => ` * what ${e}`).join('\n') + '\n';
    }

    console.log(
        '\n' +
        'jsWhat - Identify what something is.\n' +
        'Made by Apteryx (https://github.com/apteryxxyz)\n' +
        'Based on pyWhat (https://github.com/bee-san/pyWhat)\n' +
        '\n' +
        'Usage: what <text> [options]\n',
        '\n' +
        'Options:\n' +
        generateOptions() +
        '\n' +
        'Examples:\n' +
        generateExamples()
    )
};

(async function () {
    const input = new InputHandler();
    const output = new OutputHandler();

    const argv = process.argv.slice(2);
    const options = input.handleOptions(argv);
    const text = input.handleText(argv);

    if (!options || !text) return;
    if (options.help) return output.handleHelp();
    if (options.tags) return output.handleTags();
    if (options.version) return console.log(package.version);

    let matched = await what.is(text, options.search, { nontext, filter } = options);
    if (matched.error) return output.handleError(matched.error);

    if (matched.length < 1) return output.handleError(`Zero matches found`);
    const totalMatched = matched.length;
    if (totalMatched > 50) matched = matched.slice(0, 50);

    let table = '';
    if (Table) {
        table = new Table({ head: ['Matched at', 'Identified as', 'Description'] });
        for (const match of matched) {
            let description = '';
            if (match.description) description += match.description + '\n';
            if (match.url) description += match.url;
            if (description === '') description = 'None';
            table.push([match.matched, match.name, description]);
        }
    } else {
        delete matched.text;
        delete matched.error;
        table = matched.map(x => {
            return {
                'Matched at': x.matched,
                'Identified as': x.name,
                'Description': x.description || 'None',
                'URL': x.url || 'None'
            }
        })
    }

    return output.handleTable(matched, totalMatched, table)
})();