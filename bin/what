#! /usr/bin/env node

'ues strict';

const what = require('../dist/what.js');
const timer = Date.now();

const OPTIONS = [
    // { name: [long, short], value: typeof, description: string },
    {
        name: ['help', 'h'], value: 'boolean',
        description: 'Show help message.',
    },
    {
        name: ['version', 'v'], value: 'boolean',
        description: 'Show help message.',
    },
    {
        name: ['search', 's'], value: 'boolean',
        description: 'Show the installed version of jsWhat.',
    },
    {
        name: ['non-text', 'n'], value: 'boolean',
        description: 'The text input(s) should be treated as file paths or URLs.',
    },
    {
        name: ['tags', 't'], value: 'boolean',
        description: 'Show all available tags.',
    },
    {
        name: ['filter', 'f'], value: str => str.split(',').map(s => s.trim()),
        description: 'Filter the results by names or tags, separate by commas.',
    },
    {
        name: ['exclude', 'e'], value: str => str.split(',').map(s => s.trim()),
        description: 'Exclude results based on names and tags, separate by commas.',
    },
    {
        name: ['rarity', 'r'], value: str => str.split(',').slice(0, 2).map(Number),
        description: 'Filter the results by rarity, one or two numbers searate by commas.',
    },
];

const SHORT = /^-([^\d-]+)$/;
const LONG = /^--(\S+)=(.*)$/;
const REGEXES = [SHORT, LONG];

function parseOptions(args) {
    const options = {};
    const flags = [].concat.apply([], args.map(a => REGEXES.map(r => a.match(r)).filter(Boolean)).filter(Boolean));

    function parseOption(name, value) {
        const option = OPTIONS.find(o => o.name.indexOf(name) !== -1);
        if (!option) return;

        if (option.value === 'boolean') {
            options[option.name[0]] = true;
        } else if (typeof option.value === 'function') {
            options[option.name[0]] = option.value(value);
        } else {
            options[option.name[0]] = value;
        }
    }

    for (let i = 0; i < flags.length; i++) {
        const flag = flags[i];
        if (SHORT.test(flag)) {
            flag[1].split('').forEach(f => parseOption(f, true));
        } else if (LONG.test(flag)) {
            parseOption(flag[1], flag[2]);
        }
    }

    return options;
}

function handleError(error) {
    const message = error.message || error;
    return console.error('\x1b[31m%s\x1b[0m',
        `\n${message.toString()}\nTook: ${Date.now() - timer}ms`);
}

(function $() {
    const args = process.argv.slice(2);
    const options = parseOptions(args);
    const inputs = args.filter(arg => !arg.startsWith('-'));
    const repeat = (s, c) => new Array(c + 1).join(s);

    if (options.version) return console.log(what.version);
    if (options.tags) return console.log(what.check.regexes.map(r => r.tags).flat().join(', '));

    if (!inputs.length || options.help) {
        return console.log((function _() {
            return `${'\njsWhat - Identify what something is.\n' +
                'Created by Apteryx (https://github.com/apteryxxyz)\n' +
                'Based on pyWhat (https://github.com/bee-san/pyWhat)\n' +
                '\nUsage: what <inputs> [options]\n\n' +
                'Options:\n'}${OPTIONS.map(o => {
                let string = ' ', count = 20 - o.name[0].length;
                if (o.name[1]) string += `-${o.name[1]}, `;
                return `${string}--${o.name[0] + repeat(' ', count) + o.description}`;
            }).join('\n')
            }\nExamples:\n${[
                '192.168.0.2',
                'e@mail.com --search',
                'dQw4w9WgXcQ --filter=media',
                'path/to/file --nontext --search',
                'https://raw.github.com/apteryxxyz/jswhat/main/README.md -n -s',
                '--tags',
                'e@mail.com g@mail.com fakemail.com -s -f="Email Address"',
                'e@mail.com g@mail.com hot@mail.com mail.google.com -s -e="Email Address"',
            ].map(e => ` * what ${e}`).join('\n')
            }\n`;
        }()));
    }

    return new Promise((r1, r2) => {
        const results = what.is(inputs, options);
        Promise.resolve(results).then(r1).catch(r2);
    })
        .then(data => {
            if (data.length === 0) return handleError('Zero matches found!');
            const rarity = data.filter(d => d.rarity > 0);
            const matches = data.length > 50 ?
                rarity.length > 50 ?
                    rarity.slice(0, 50) :
                    rarity : data;

            let header = '\nPossible Identification\n';
            if (rarity.length > 50) header += `Showing 50/${data.length}\n`;
            console.log('\x1b[36m%s\x1b[0m', header);

            console.table(matches.map(m => ({
                'Matched at': m.matched,
                'Identified as': m.name,
                Description: m.description || 'None',
                URL: m.url || 'None',
            })), ['Matched at', 'Identified as', 'Description', 'URL']);
            if (rarity.length > 25) console.log('\x1b[36m%s\x1b[0m', header);
            return console.log(`\nTook: ${Date.now() - timer}ms`);
        })
        .catch(handleError);
}());
